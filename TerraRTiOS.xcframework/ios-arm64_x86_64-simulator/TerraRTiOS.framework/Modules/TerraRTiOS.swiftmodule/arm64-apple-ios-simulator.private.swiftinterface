// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TerraRTiOS
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CoreBluetooth
import CoreMotion
import DeveloperToolsSupport
import Foundation
import HealthKit
import Swift
import SwiftUI
@_exported import TerraRTiOS
import UIKit
import WatchConnectivity
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct HeartBeatIntervalPayload : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct HeartBeatInterval : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct TerraAuthResponse : Swift.Codable {
  public var status: Swift.String
  public var user_id: Swift.String?
  public var reference_id: Swift.String?
  public var message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TerraError : Swift.Error {
  case UnknownOpcode
  case FeatureNotSupported
  case DataTypeNotSupportedForDevice
  case DeviceNotConnected
  case UnknownDevice
  case WebsocketDisconnected
  public static func == (a: TerraRTiOS.TerraError, b: TerraRTiOS.TerraError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DataTypes : Swift.String, Swift.Codable {
  case HEART_RATE
  case ECG
  case STEPS
  case HRV
  case CALORIES
  case LOCATION
  case SPEED
  case DISTANCE
  case STEPS_CADENCE
  case FLOORS_CLIMBED
  case GYROSCOPE
  case ACCELERATION
  case CORE_TEMPERATURE
  case SKIN_TEMPERATURE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct GatewaySendPayload : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class GattAttributes {
  public func lookup(_ name: Swift.String) -> CoreBluetooth.CBUUID?
  public func dataName(_ cbuuid: CoreBluetooth.CBUUID) -> Swift.String?
  @objc deinit
}
extension SwiftUI.Color {
  public static var border: SwiftUI.Color {
    get
  }
  public static var background: SwiftUI.Color {
    get
  }
  public static var button: SwiftUI.Color {
    get
  }
  public static var disabledButton: SwiftUI.Color {
    get
  }
  public static var inverse: SwiftUI.Color {
    get
  }
  public static var accent: SwiftUI.Color {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct TerraBLEWidget : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10TerraRTiOS0A9BLEWidgetV4bodyQrvp", 0) __
}
public enum Opcode : Swift.Int {
  case HEARTRATE
  case HEARTBEAT_ACK
  case HELLO
  case IDENTIFY
  case READY
  case DISPATCH
  case SUBMIT
  case REPLAY
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum WorkoutEvent : Swift.String {
  case PAUSE
  case STOP
  case RESUME
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Identify : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IdentifyPayload : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ConnectionState : Swift.Int, Swift.Codable {
  case CONNECTING
  case CONNECTED
  case DISCONNECTED
  case INACTIVE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Update : Swift.Codable {
  public var ts: Swift.String?
  public var val: Swift.Double?
  public var type: Swift.String?
  public var d: [Swift.Double]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class TerraRT {
  public init(devId: Swift.String, referenceId: Swift.String?, completion: @escaping (Swift.Bool) -> Swift.Void)
  public func getUserid() -> Swift.String?
  public func initConnection(token: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void = {(success) -> Void in})
  public func connectWithWatchOS() throws
  public func startBluetoothScan(type: TerraRTiOS.Connections, bluetoothLowEnergyFromCache: Swift.Bool = false, callback: @escaping (Swift.Bool) -> Swift.Void = {_ in}) -> TerraRTiOS.TerraBLEWidget?
  public func startBluetoothScan(type: TerraRTiOS.Connections, deviceCallback: @escaping (TerraRTiOS.Device) -> Swift.Void)
  public func connectDevice(_ device: TerraRTiOS.Device, _ connectionCallback: @escaping (Swift.Bool) -> Swift.Void)
  public func stopRealtime(type: TerraRTiOS.Connections)
  public func startRealtime(type: TerraRTiOS.Connections, dataType: Swift.Set<TerraRTiOS.DataTypes>, token: Swift.String, callback: @escaping (TerraRTiOS.Update) -> Swift.Void, connectionCallback: @escaping (Swift.Bool) -> Swift.Void = {_ in })
  public func startRealtime(type: TerraRTiOS.Connections, dataType: Swift.Set<TerraRTiOS.DataTypes>, token: Swift.String, connectionCallback: @escaping (Swift.Bool) -> Swift.Void = {_ in})
  public func startRealtime(type: TerraRTiOS.Connections, dataType: Swift.Set<TerraRTiOS.DataTypes>, callback: @escaping (TerraRTiOS.Update) -> Swift.Void)
  public func disconnect(type: TerraRTiOS.Connections)
  public func getConnectedDevice() -> TerraRTiOS.Device?
  public func setWatchOSConnectionStateListener(listener: @escaping (TerraRTiOS.ConnectionState) -> Swift.Void)
  public func pauseWatchOSWorkout(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func resumeWatchOSWorkout(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func stopWatchOSWorkout(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func sendMessage(_ data: [Swift.String : Any])
  public func setMessageHandler(_ messageHandler: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func setWatchStateChangeListeners(isPairedListener: ((Swift.Bool) -> Swift.Void)?, isAppInstalledListener: ((Swift.Bool) -> Swift.Void)?, isComplicationEnabledListener: ((Swift.Bool) -> Swift.Void)?)
  public func setWebsocketListener(_ listener: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DeviceList : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum Connections : Swift.String {
  case BLE
  case APPLE
  case WATCH_OS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Device : Swift.Identifiable {
  public let deviceName: Swift.String
  public let deviceUUID: Swift.String
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
public struct DataPayload : Swift.Codable {
  public var ts: Swift.String
  public var val: Swift.Double?
  public var d: [Swift.Double]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension TerraRTiOS.TerraError : Swift.Equatable {}
extension TerraRTiOS.TerraError : Swift.Hashable {}
extension TerraRTiOS.DataTypes : Swift.Equatable {}
extension TerraRTiOS.DataTypes : Swift.Hashable {}
extension TerraRTiOS.DataTypes : Swift.RawRepresentable {}
extension TerraRTiOS.Opcode : Swift.Equatable {}
extension TerraRTiOS.Opcode : Swift.Hashable {}
extension TerraRTiOS.Opcode : Swift.RawRepresentable {}
extension TerraRTiOS.WorkoutEvent : Swift.Equatable {}
extension TerraRTiOS.WorkoutEvent : Swift.Hashable {}
extension TerraRTiOS.WorkoutEvent : Swift.RawRepresentable {}
extension TerraRTiOS.ConnectionState : Swift.Equatable {}
extension TerraRTiOS.ConnectionState : Swift.Hashable {}
extension TerraRTiOS.ConnectionState : Swift.RawRepresentable {}
extension TerraRTiOS.Connections : Swift.Equatable {}
extension TerraRTiOS.Connections : Swift.Hashable {}
extension TerraRTiOS.Connections : Swift.RawRepresentable {}
